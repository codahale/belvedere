// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/codahale/belvedere/pkg/belvedere/internal/resources (interfaces: Builder)

// Package belvedere is a generated GoMock package.
package belvedere

import (
	cfg "github.com/codahale/belvedere/pkg/belvedere/cfg"
	deployments "github.com/codahale/belvedere/pkg/belvedere/internal/deployments"
	gomock "github.com/golang/mock/gomock"
	dns "google.golang.org/api/dns/v1"
	reflect "reflect"
)

// ResourceBuilder is a mock of Builder interface
type ResourceBuilder struct {
	ctrl     *gomock.Controller
	recorder *ResourceBuilderMockRecorder
}

// ResourceBuilderMockRecorder is the mock recorder for ResourceBuilder
type ResourceBuilderMockRecorder struct {
	mock *ResourceBuilder
}

// NewResourceBuilder creates a new mock instance
func NewResourceBuilder(ctrl *gomock.Controller) *ResourceBuilder {
	mock := &ResourceBuilder{ctrl: ctrl}
	mock.recorder = &ResourceBuilderMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *ResourceBuilder) EXPECT() *ResourceBuilderMockRecorder {
	return m.recorder
}

// App mocks base method
func (m *ResourceBuilder) App(arg0, arg1 string, arg2 *dns.ManagedZone, arg3 *cfg.Config) []deployments.Resource {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "App", arg0, arg1, arg2, arg3)
	ret0, _ := ret[0].([]deployments.Resource)
	return ret0
}

// App indicates an expected call of App
func (mr *ResourceBuilderMockRecorder) App(arg0, arg1, arg2, arg3 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "App", reflect.TypeOf((*ResourceBuilder)(nil).App), arg0, arg1, arg2, arg3)
}

// Base mocks base method
func (m *ResourceBuilder) Base(arg0 string) []deployments.Resource {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Base", arg0)
	ret0, _ := ret[0].([]deployments.Resource)
	return ret0
}

// Base indicates an expected call of Base
func (mr *ResourceBuilderMockRecorder) Base(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Base", reflect.TypeOf((*ResourceBuilder)(nil).Base), arg0)
}

// Release mocks base method
func (m *ResourceBuilder) Release(arg0, arg1, arg2, arg3, arg4 string, arg5 *cfg.Config) []deployments.Resource {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Release", arg0, arg1, arg2, arg3, arg4, arg5)
	ret0, _ := ret[0].([]deployments.Resource)
	return ret0
}

// Release indicates an expected call of Release
func (mr *ResourceBuilderMockRecorder) Release(arg0, arg1, arg2, arg3, arg4, arg5 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Release", reflect.TypeOf((*ResourceBuilder)(nil).Release), arg0, arg1, arg2, arg3, arg4, arg5)
}
