// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/codahale/belvedere/pkg/belvedere (interfaces: AppService)

// Package main is a generated GoMock package.
package main

import (
	context "context"
	belvedere "github.com/codahale/belvedere/pkg/belvedere"
	cfg "github.com/codahale/belvedere/pkg/belvedere/cfg"
	gomock "github.com/golang/mock/gomock"
	reflect "reflect"
	time "time"
)

// MockAppService is a mock of AppService interface
type MockAppService struct {
	ctrl     *gomock.Controller
	recorder *MockAppServiceMockRecorder
}

// MockAppServiceMockRecorder is the mock recorder for MockAppService
type MockAppServiceMockRecorder struct {
	mock *MockAppService
}

// NewMockAppService creates a new mock instance
func NewMockAppService(ctrl *gomock.Controller) *MockAppService {
	mock := &MockAppService{ctrl: ctrl}
	mock.recorder = &MockAppServiceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockAppService) EXPECT() *MockAppServiceMockRecorder {
	return m.recorder
}

// Create mocks base method
func (m *MockAppService) Create(arg0 context.Context, arg1, arg2 string, arg3 *cfg.Config, arg4 bool, arg5 time.Duration) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Create", arg0, arg1, arg2, arg3, arg4, arg5)
	ret0, _ := ret[0].(error)
	return ret0
}

// Create indicates an expected call of Create
func (mr *MockAppServiceMockRecorder) Create(arg0, arg1, arg2, arg3, arg4, arg5 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Create", reflect.TypeOf((*MockAppService)(nil).Create), arg0, arg1, arg2, arg3, arg4, arg5)
}

// Delete mocks base method
func (m *MockAppService) Delete(arg0 context.Context, arg1 string, arg2, arg3 bool, arg4 time.Duration) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Delete", arg0, arg1, arg2, arg3, arg4)
	ret0, _ := ret[0].(error)
	return ret0
}

// Delete indicates an expected call of Delete
func (mr *MockAppServiceMockRecorder) Delete(arg0, arg1, arg2, arg3, arg4 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Delete", reflect.TypeOf((*MockAppService)(nil).Delete), arg0, arg1, arg2, arg3, arg4)
}

// List mocks base method
func (m *MockAppService) List(arg0 context.Context) ([]belvedere.App, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "List", arg0)
	ret0, _ := ret[0].([]belvedere.App)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// List indicates an expected call of List
func (mr *MockAppServiceMockRecorder) List(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "List", reflect.TypeOf((*MockAppService)(nil).List), arg0)
}

// Update mocks base method
func (m *MockAppService) Update(arg0 context.Context, arg1 string, arg2 *cfg.Config, arg3 bool, arg4 time.Duration) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Update", arg0, arg1, arg2, arg3, arg4)
	ret0, _ := ret[0].(error)
	return ret0
}

// Update indicates an expected call of Update
func (mr *MockAppServiceMockRecorder) Update(arg0, arg1, arg2, arg3, arg4 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Update", reflect.TypeOf((*MockAppService)(nil).Update), arg0, arg1, arg2, arg3, arg4)
}
