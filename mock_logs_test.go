// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/codahale/belvedere/pkg/belvedere (interfaces: LogService)

// Package main is a generated GoMock package.
package main

import (
	context "context"
	belvedere "github.com/codahale/belvedere/pkg/belvedere"
	gomock "github.com/golang/mock/gomock"
	reflect "reflect"
	time "time"
)

// MockLogService is a mock of LogService interface
type MockLogService struct {
	ctrl     *gomock.Controller
	recorder *MockLogServiceMockRecorder
}

// MockLogServiceMockRecorder is the mock recorder for MockLogService
type MockLogServiceMockRecorder struct {
	mock *MockLogService
}

// NewMockLogService creates a new mock instance
func NewMockLogService(ctrl *gomock.Controller) *MockLogService {
	mock := &MockLogService{ctrl: ctrl}
	mock.recorder = &MockLogServiceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockLogService) EXPECT() *MockLogServiceMockRecorder {
	return m.recorder
}

// List mocks base method
func (m *MockLogService) List(arg0 context.Context, arg1, arg2, arg3 string, arg4 time.Duration, arg5 []string) ([]belvedere.LogEntry, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "List", arg0, arg1, arg2, arg3, arg4, arg5)
	ret0, _ := ret[0].([]belvedere.LogEntry)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// List indicates an expected call of List
func (mr *MockLogServiceMockRecorder) List(arg0, arg1, arg2, arg3, arg4, arg5 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "List", reflect.TypeOf((*MockLogService)(nil).List), arg0, arg1, arg2, arg3, arg4, arg5)
}
